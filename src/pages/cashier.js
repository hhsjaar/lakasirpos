import React, { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';

import {
  IoIosArrowBack,
  IoIosSearch,
  IoIosNotifications,
  IoIosMenu,
  IoIosAdd,
  IoIosClose,
} from "react-icons/io";

const Cashier = () => {
  const router = useRouter();
  const [currentTab, setCurrentTab] = useState('All');
  const [showModal, setShowModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [cartItems, setCartItems] = useState([]);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [showPaymentOptionModal, setShowPaymentOptionModal] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState(null);

  const foodItems = [
    { id: 1, name: 'Italia Pizza', price: 80000, image: '/food.png' },
    { id: 2, name: 'Burger', price: 50000, image: '/food.png' },
    { id: 3, name: 'Sushi', price: 60000, image: '/food.png' },
    { id: 4, name: 'Coffee', price: 30000, image: '/food.png' },
    { id: 5, name: 'Roll Sushi', price: 65000, image: '/food.png' },
    { id: 6, name: 'Spicy Sushi', price: 70000, image: '/food.png' },
    { id: 7, name: 'Family Sushi', price: 90000, image: '/food.png' },
    { id: 8, name: 'Orange Shine', price: 35000, image: '/food.png' },
  ];

  const handleQuantityChange = (id, increment) => {
    setCartItems((prevItems) =>
      prevItems.map((item) =>
        item.id === id
          ? {
              ...item,
              quantity: Math.max(1, item.quantity + increment),
            }
          : item
      )
    );
  };

  const handleAddToCart = (item) => {
    const existingItem = cartItems.find((cartItem) => cartItem.id === item.id);
    if (existingItem) {
      setCartItems((prevItems) =>
        prevItems.map((cartItem) =>
          cartItem.id === item.id
            ? { ...cartItem, quantity: cartItem.quantity + 1 }
            : cartItem
        )
      );
    } else {
      setCartItems((prevItems) => [...prevItems, { ...item, quantity: 1 }]);
    }
  };

  const calculateSubtotal = () => {
    return cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
  };

  const [discount, setDiscount] = useState(0);
  const calculateTotal = () => {
    return calculateSubtotal() - discount;
  };

  return (
    <>
      <Head>
        <title>Demo - Lakasir</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen flex bg-gray-100 dark:bg-gray-900">
        {/* Left Section */}
        <div className="w-2/3 p-6">
          {/* Navigation Bar */}
          <nav className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-4">
              <IoIosArrowBack
                className="text-2xl text-gray-700 dark:text-gray-200"
                onClick={() => router.push('/demo')}
              />
              <h1 className="text-xl font-bold text-gray-800 dark:text-gray-100">Cashier</h1>
            </div>
            <div className="flex items-center space-x-4">
              <div className="relative rounded-lg">
                <IoIosSearch className="absolute left-2 top-2 text-gray-500" />
                <input
                  type="text"
                  placeholder="Search"
                  className="pl-8 py-2 w-48 rounded-lg text-sm bg-white dark:bg-gray-800 border-b border-gray-300 focus:outline-none dark:text-gray-200"
                />
              </div>
              <div className="p-2 bg-gray-200 rounded-full dark:bg-gray-800">
                <IoIosNotifications className="text-xl text-gray-700 dark:text-gray-200" />
              </div>
              <div className="p-2 bg-gray-200 rounded-full dark:bg-gray-800">
                <IoIosMenu className="text-xl text-gray-700 dark:text-gray-200" />
              </div>
            </div>
          </nav>

          {/* Tabs */}
          <div className="flex space-x-6 border-b border-gray-300">
            {['All', 'Food', 'Drink', 'Snack'].map((tab) => (
              <button
                key={tab}
                className={`pb-2 ${
                  currentTab === tab
                    ? 'text-orange-custom border-b-2 border-orange-custom'
                    : 'text-gray-500'
                }`}
                onClick={() => setCurrentTab(tab)}
              >
                {tab}
              </button>
            ))}
          </div>

          {/* Food Cards */}
          <div className="grid grid-cols-4 gap-4 mt-6">
            {foodItems.map((item) => (
              <div
                key={item.id}
                className="bg-white dark:bg-gray-800 rounded-lg p-4 flex flex-col items-center shadow-md hover:shadow-lg hover:scale-105 transition-transform duration-300"
                onClick={() => setSelectedItem(item)}
              >
                <div className="relative w-36 h-36">
                  <Image
                    src={item.image}
                    alt={item.name}
                    layout="fill"
                    className="rounded-lg object-cover"
                  />
                </div>
                <h2 className="mt-2 text-gray-800 dark:text-gray-100 font-semibold">{item.name}</h2>
                <p className="text-xs text-gray-500">Total Price</p>
                <p className="text-md font-md text-orange-custom dark:text-gray-100">
                  Rp {item.price.toLocaleString()}
                </p>
                <button
                  className="mt-4 p-2 bg-orange-custom text-white rounded-full flex items-center justify-center"
                  onClick={() => setShowModal(true)}
                >
                  <IoIosAdd className="text-xl" />
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* Right Section */}
        <div className="w-1/3 bg-gray-100 p-6">
          <h2 className="text-xl font-bold mb-4">Order Details</h2>
          {cartItems.length > 0 &&
            cartItems.map((item) => (
              <div
                key={item.id}
                className="flex items-center justify-between bg-white p-4 mb-2 rounded-lg shadow"
              >
                <Image src={item.image} alt={item.name} width={50} height={50} />
                <div className="flex-1 mx-4">
                  <h3 className="font-semibold text-gray-700">{item.name}</h3>
                  <p className="text-sm text-gray-500">
                    Rp {item.price.toLocaleString()} x {item.quantity}
                  </p>
                </div>
                <div className="flex items-center">
                  <button
                    className="px-2 py-1 bg-gray-300 rounded"
                    onClick={() => handleQuantityChange(item.id, -1)}
                  >
                    -
                  </button>
                  <span className="px-4">{item.quantity}</span>
                  <button
                    className="px-2 py-1 bg-gray-300 rounded"
                    onClick={() => handleQuantityChange(item.id, 1)}
                  >
                    +
                  </button>
                </div>
              </div>
            ))}

          <div className="mt-4">
            {cartItems.length > 0 ? (
              <>
                <div className="flex justify-between">
                  <span>Subtotal:</span>
                  <span>Rp {calculateSubtotal().toLocaleString()}</span>
                </div>
                <div className="flex justify-between mt-2">
                  <span>Discount:</span>
                  <input
                    type="number"
                    className="w-20 px-2 py-1 border rounded"
                    value={discount}
                    onChange={(e) => setDiscount(Number(e.target.value))}
                  />
                </div>
                <div className="flex justify-between mt-2 font-bold">
                  <span>Total:</span>
                  <span>Rp {calculateTotal().toLocaleString()}</span>
                </div>
              </>
            ) : (
              <p className="text-gray-500">No items in the cart.</p>
            )}
          </div>

          {cartItems.length > 0 && (
            <button
              className="mt-6 w-full py-3 bg-orange-500 text-white font-bold rounded-full hover:bg-orange-600 transition"
              onClick={() => setShowPaymentModal(true)}
            >
              {cartItems.length} items selected - Total: Rp {calculateTotal().toLocaleString()}
            </button>
          )}
        </div>
      </div>

      {/* Payment Modal */}
      {showPaymentModal && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg w-2/3">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-bold text-gray-800 dark:text-gray-100">
                Payment Details
              </h2>
              <IoIosClose
                className="text-2xl text-gray-700 dark:text-gray-200 cursor-pointer"
                onClick={() => setShowPaymentModal(false)}
              />
            </div>
            <div className="space-y-4">
              <div className="flex justify-between">
                <span className="text-gray-700 dark:text-gray-300">Subtotal:</span>
                <span className="text-gray-800 dark:text-gray-100">Rp {calculateSubtotal().toLocaleString()}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-700 dark:text-gray-300">Discount:</span>
                <span className="text-gray-800 dark:text-gray-100">Rp {discount.toLocaleString()}</span>
              </div>
              <div className="flex justify-between font-bold">
                <span className="text-gray-800 dark:text-gray-100">Total:</span>
                <span className="text-orange-500">Rp {calculateTotal().toLocaleString()}</span>
              </div>
            </div>
            <div className="flex justify-between mt-6 space-x-2">
              <button
                className="flex-1 py-3 border border-orange-custom text-orange-custom rounded-full dark:bg-gray-700 dark:text-gray-300 hover:bg-orange-100 transition"
                onClick={() => setShowPaymentModal(false)}
              >
                Cancel
              </button>
              <button
                className="flex-1 py-3 bg-orange-custom text-white rounded-full flex items-center justify-center hover:bg-orange-600 transition"
                onClick={() => {
                  setShowPaymentModal(false);
                  setShowPaymentOptionModal(true);
                }}
              >
                Confirm Payment
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Payment Option Modal */}
      {showPaymentOptionModal && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg w-2/3">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-bold text-gray-800 dark:text-gray-100">
                Select Payment Method
              </h2>
              <IoIosClose
                className="text-2xl text-gray-700 dark:text-gray-200 cursor-pointer"
                onClick={() => setShowPaymentOptionModal(false)}
              />
            </div>
            <div className="space-y-4">
              <button
                className="w-full py-3 bg-gray-100 text-gray-700 rounded-lg dark:bg-gray-700 dark:text-gray-300 hover:text-white hover:bg-orange-custom"
                onClick={() => setPaymentMethod('QRIS')}
              >
                QRIS
              </button>
              <button
                className="w-full py-3 bg-gray-100 text-gray-700 rounded-lg dark:bg-gray-700 dark:text-gray-300 hover:text-white hover:bg-orange-custom"
                onClick={() => setPaymentMethod('Cash')}
              >
                Cash
              </button>
            </div>
            {paymentMethod === 'QRIS' && (
  <div className="mt-6 flex flex-col justify-center items-center text-center">
    <h3 className="text-lg font-bold text-gray-800 dark:text-gray-100 mb-4">Scan QR Code</h3>
    <Image src="/qris1.png" alt="QR Code" width={400} height={400} />
  </div>
)}

            {paymentMethod === 'Cash' && (
              <div className="mt-6 text-center">
                <h3 className="text-lg font-bold text-gray-800 dark:text-gray-100 mb-4">Cash Payment Selected</h3>
                <p className="text-gray-700 dark:text-gray-300">Please proceed with cash payment.</p>
              </div>
            )}
          </div>
        </div>
      )}

      {showModal && selectedItem && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg w-2/3">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-bold text-gray-800 dark:text-gray-100">
                Order Details
              </h2>
              <IoIosClose
                className="text-2xl text-gray-700 dark:text-gray-200 cursor-pointer"
                onClick={() => setShowModal(false)}
              />
            </div>
            <div className="flex space-x-6">
              <div className="relative w-48 h-48">
                <Image
                  src={selectedItem.image}
                  alt={selectedItem.name}
                  layout="fill"
                  className="rounded-lg object-cover"
                />
              </div>
              <div>
                <h3 className="text-xl font-bold text-gray-800 dark:text-gray-100">
                  {selectedItem.name}
                </h3>
                <p className="text-gray-500 dark:text-gray-300">
                  Delicious and freshly prepared.
                </p>
                <div className="mt-4">
                  <p className="text-sm text-gray-500">Quantity</p>
                  <p className="text-lg text-orange-custom font-md">1 pcs | Rp {selectedItem.price.toLocaleString()}</p>
                </div>
                <textarea
                  className="mt-4 w-full p-2 border border-gray-300 rounded-lg dark:bg-gray-800 dark:text-gray-100"
                  placeholder="Add note here (optional)"
                />
              </div>
            </div>
            <div className="flex justify-between mt-6 space-x-2">
              <button
                className="flex-1 py-3 border border-orange-custom text-orange-custom rounded-full dark:bg-gray-700 dark:text-gray-300 hover:bg-orange-100 transition"
                onClick={() => setShowModal(false)}
              >
                Cancel
              </button>
              <button
                className="flex-1 py-3 bg-orange-custom text-white rounded-full flex items-center justify-center hover:bg-orange-600 transition"
                onClick={() => handleAddToCart(selectedItem)}
              >
                <IoIosAdd className="mr-2" /> Add To Cart
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default Cashier;
